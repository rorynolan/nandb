// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cross_var_Cpp
double cross_var_Cpp(NumericVector x, NumericVector y);
RcppExport SEXP _nandb_cross_var_Cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cross_var_Cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cross_var_pillars_Cpp
NumericMatrix cross_var_pillars_Cpp(NumericVector x3d, NumericVector y3d);
RcppExport SEXP _nandb_cross_var_pillars_Cpp(SEXP x3dSEXP, SEXP y3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x3d(x3dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y3d(y3dSEXP);
    rcpp_result_gen = Rcpp::wrap(cross_var_pillars_Cpp(x3d, y3d));
    return rcpp_result_gen;
END_RCPP
}
// float_max
double float_max();
RcppExport SEXP _nandb_float_max() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(float_max());
    return rcpp_result_gen;
END_RCPP
}
// median_filter
NumericMatrix median_filter(NumericMatrix mat, int size, bool na_rm, bool na_count);
RcppExport SEXP _nandb_median_filter(SEXP matSEXP, SEXP sizeSEXP, SEXP na_rmSEXP, SEXP na_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type na_count(na_countSEXP);
    rcpp_result_gen = Rcpp::wrap(median_filter(mat, size, na_rm, na_count));
    return rcpp_result_gen;
END_RCPP
}
// smooth_filter
NumericMatrix smooth_filter(NumericMatrix mat, int size, bool na_rm, bool na_count);
RcppExport SEXP _nandb_smooth_filter(SEXP matSEXP, SEXP sizeSEXP, SEXP na_rmSEXP, SEXP na_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type na_count(na_countSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_filter(mat, size, na_rm, na_count));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nandb_cross_var_Cpp", (DL_FUNC) &_nandb_cross_var_Cpp, 2},
    {"_nandb_cross_var_pillars_Cpp", (DL_FUNC) &_nandb_cross_var_pillars_Cpp, 2},
    {"_nandb_float_max", (DL_FUNC) &_nandb_float_max, 0},
    {"_nandb_median_filter", (DL_FUNC) &_nandb_median_filter, 4},
    {"_nandb_smooth_filter", (DL_FUNC) &_nandb_smooth_filter, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_nandb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
