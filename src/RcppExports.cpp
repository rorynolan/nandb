// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ExpSmooth
NumericVector ExpSmooth(NumericVector obs, double tau);
RcppExport SEXP nandb_ExpSmooth(SEXP obsSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(ExpSmooth(obs, tau));
    return rcpp_result_gen;
END_RCPP
}
// ExpSmoothPillars
NumericVector ExpSmoothPillars(NumericVector mat3d, double tau);
RcppExport SEXP nandb_ExpSmoothPillars(SEXP mat3dSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mat3d(mat3dSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(ExpSmoothPillars(mat3d, tau));
    return rcpp_result_gen;
END_RCPP
}
// ExpSmoothRows
NumericMatrix ExpSmoothRows(NumericMatrix mat, double tau);
RcppExport SEXP nandb_ExpSmoothRows(SEXP matSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(ExpSmoothRows(mat, tau));
    return rcpp_result_gen;
END_RCPP
}
// MedianFilterB
NumericMatrix MedianFilterB(NumericMatrix mat, int size, bool na_rm, bool na_count);
RcppExport SEXP nandb_MedianFilterB(SEXP matSEXP, SEXP sizeSEXP, SEXP na_rmSEXP, SEXP na_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type na_count(na_countSEXP);
    rcpp_result_gen = Rcpp::wrap(MedianFilterB(mat, size, na_rm, na_count));
    return rcpp_result_gen;
END_RCPP
}
// SmoothFilterB
NumericMatrix SmoothFilterB(NumericMatrix mat, int size, bool na_rm, bool na_count);
RcppExport SEXP nandb_SmoothFilterB(SEXP matSEXP, SEXP sizeSEXP, SEXP na_rmSEXP, SEXP na_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type na_count(na_countSEXP);
    rcpp_result_gen = Rcpp::wrap(SmoothFilterB(mat, size, na_rm, na_count));
    return rcpp_result_gen;
END_RCPP
}
// MostConsecutiveLEs
int MostConsecutiveLEs(NumericVector x, double thresh);
RcppExport SEXP nandb_MostConsecutiveLEs(SEXP xSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(MostConsecutiveLEs(x, thresh));
    return rcpp_result_gen;
END_RCPP
}
// MostConsecutiveLEsPillars
IntegerMatrix MostConsecutiveLEsPillars(NumericVector mat3d, double thresh);
RcppExport SEXP nandb_MostConsecutiveLEsPillars(SEXP mat3dSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mat3d(mat3dSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(MostConsecutiveLEsPillars(mat3d, thresh));
    return rcpp_result_gen;
END_RCPP
}
// MeanPillars
NumericMatrix MeanPillars(NumericVector mat3d);
RcppExport SEXP nandb_MeanPillars(SEXP mat3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mat3d(mat3dSEXP);
    rcpp_result_gen = Rcpp::wrap(MeanPillars(mat3d));
    return rcpp_result_gen;
END_RCPP
}
// VarPillars
NumericMatrix VarPillars(NumericVector mat3d);
RcppExport SEXP nandb_VarPillars(SEXP mat3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mat3d(mat3dSEXP);
    rcpp_result_gen = Rcpp::wrap(VarPillars(mat3d));
    return rcpp_result_gen;
END_RCPP
}
// MedianPillars
NumericMatrix MedianPillars(NumericVector mat3d);
RcppExport SEXP nandb_MedianPillars(SEXP mat3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mat3d(mat3dSEXP);
    rcpp_result_gen = Rcpp::wrap(MedianPillars(mat3d));
    return rcpp_result_gen;
END_RCPP
}
// WhichIntervalC
IntegerVector WhichIntervalC(NumericVector numbers, NumericMatrix ranges);
RcppExport SEXP nandb_WhichIntervalC(SEXP numbersSEXP, SEXP rangesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type numbers(numbersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ranges(rangesSEXP);
    rcpp_result_gen = Rcpp::wrap(WhichIntervalC(numbers, ranges));
    return rcpp_result_gen;
END_RCPP
}
// SplitEverykGives
int SplitEverykGives(IntegerVector vec, int k);
RcppExport SEXP nandb_SplitEverykGives(SEXP vecSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(SplitEverykGives(vec, k));
    return rcpp_result_gen;
END_RCPP
}
// SpreadSpecificHelper
IntegerVector SpreadSpecificHelper(NumericVector interval_lengths, IntegerVector interval_pops, int m);
RcppExport SEXP nandb_SpreadSpecificHelper(SEXP interval_lengthsSEXP, SEXP interval_popsSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type interval_lengths(interval_lengthsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type interval_pops(interval_popsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(SpreadSpecificHelper(interval_lengths, interval_pops, m));
    return rcpp_result_gen;
END_RCPP
}
