[{"path":"/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"/articles/batch-mode.html","id":"batch-processing","dir":"Articles","previous_headings":"","what":"Batch processing","title":"Batch mode","text":"Batch processing applies routine images directory. directory images want perform N&B calculations don’t, put ones want calculate directory act directory. put resulting images wherever like. First decide whether images need thresholded . , need thresholded don’t, put separate directories process separately. Always remember check thresholding worked satisfactorily employed. calculate brightness directory path///dir e.g. Huang thresholding detrending, run make new directory called brightness within path///dir contain processed TIFF images. named way make clear processed (thresholding detrending parameters). brightness_timeseries() also equivalent batch mode brightness_timeseries_folder(), bases covered.","code":"brightness_folder(\"path/to/some/dir\", def = \"e\", thresh = \"Huang\", detrend = TRUE)"},{"path":"/articles/brightness-timeseries.html","id":"ordinary-brightness","dir":"Articles","previous_headings":"","what":"Ordinary brightness","title":"Brightness timeseries","text":"Consider time-stack image series img 100 frames. ordinary call brightness(img, def = \"epsilon\") use 100 frames calculate brightness image.","code":""},{"path":"/articles/brightness-timeseries.html","id":"a-contiguous-brightness-timeseries","dir":"Articles","previous_headings":"","what":"A contiguous brightness timeseries","title":"Brightness timeseries","text":"Sometimes want see brightness changing course acquisition. , break img sequences say 25 consecutive frames, getting 4 sets frames (1-25, 26-50, 51-75 76-100) calculate 4 brightness images. Ordinarily quite laborious brightness_timeseries(img, def = \"epsilon\", frames_per_set = 25) ease.","code":""},{"path":"/articles/brightness-timeseries.html","id":"an-overlapped-brightness-timeseries","dir":"Articles","previous_headings":"","what":"An overlapped brightness timeseries","title":"Brightness timeseries","text":"get fine-grained time information, overlap windows get 76 sets frames (1-25, 2-26, 3-27, …, 76-100). can done brightness_timeseries(img, def = \"epsilon\", frames_per_set = 25, overlap = TRUE). Beware calculating overlapped timeseries like resulting frames correlated e.g. calculations frames 1-25 2-26 use almost data.","code":""},{"path":"/articles/single-images.html","id":"ordinary-brightness","dir":"Articles","previous_headings":"","what":"Ordinary brightness","title":"Calculating brightness with single images","text":"package contains sample image series can found atsystem.file(\"extdata\", \"two_ch.tif\", package = \"nandb\"). ’s 2 channels 100 frames. Diffusing fluorescent particles imaged. Protein labelled red dye red photons collected channel 1. Protein B labelled green green photons collected channel 2. image can read R read_tif() command provided ijtiff package. ’ll assign variable called my_img. my_img now 4-dimensional array. Slots 1 2 hold y x pixel positions, slot 3 indexes channel slot 4 indexes frame.","code":"path <- system.file(\"extdata\", \"two_ch.tif\", package = \"nandb\") print(path) #> [1] \"/Users/runner/work/_temp/Library/nandb/extdata/two_ch.tif\" my_img <- read_tif(path) #> Reading two_ch.tif: an 8-bit, 30x28 pixel image of unsigned #> integer type. Reading 2 channels and 100 frames . . . #> Done. dim(my_img) #> [1]  30  28   2 100"},{"path":"/articles/single-images.html","id":"the-need-for-detrending","dir":"Articles","previous_headings":"Ordinary brightness","what":"The need for detrending","title":"Calculating brightness with single images","text":"Plotting mean intensities frames two channels, can see second channel obvious bleaching.  presence bleaching image series tells us employ detrending routine part calculations. Often ’s obvious whether detrending required. nandb includes Robin Hood detrending won’t interfere much images don’t need detrending, whilst effictively detrending images need . Hence, ’s pretty safe detrending option turned general, leave ’re sure ’s needed. turn detrending, use detrend = TRUE brightness() functions.","code":"#> Warning: Removed 1 row containing non-finite outside the scale range #> (`stat_smooth()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"/articles/single-images.html","id":"thresholding","dir":"Articles","previous_headings":"Ordinary brightness","what":"Thresholding","title":"Calculating brightness with single images","text":"can see image part cell, edge cell across top left hence top left corner image cell, just background. ’s important threshold away background part: detrending routine assumes parts image part region interest (cell) later, calculate summary statistics like mean/median brightness, also want background regions excluded. Hence, need set background parts NA detrending brightness calculations. nandb thresholding functionality ImageJ Auto Threshold plugin. can read https://imagej.net/plugins/auto-threshold. favourite method Huang. Let’s look channels Huang thresholding.  seems worked: background region top left now greyed , indicating set NA. Huang thresholding can slow, want something similar faster, try Triangle. Always check thresholding looks right afterwards. Note image interest, detrending necessary done.","code":"#> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`. #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`."},{"path":"/articles/single-images.html","id":"calculation-including-thresholding-and-detrending","dir":"Articles","previous_headings":"Ordinary brightness","what":"Calculation including thresholding and detrending","title":"Calculating brightness with single images","text":"calculate brightness image Huang thresholding Robin Hood detrending, epsilon definition brightness, run","code":"my_brightness_img <- brightness(my_img, def = \"e\",                                  thresh = \"Huang\", detrend = TRUE)"},{"path":"/articles/single-images.html","id":"timeseries-calculation","dir":"Articles","previous_headings":"Ordinary brightness > Calculation including thresholding and detrending","what":"Timeseries calculation","title":"Calculating brightness with single images","text":"calculate brightness timeseries 50 frames per set, run calculate overlapped brightness timeseries 50 frames per set, run","code":"my_brightness_ts_img <- brightness_timeseries(my_img, def = \"e\",                                                frames_per_set = 50,                                               thresh = \"Huang\", detrend = TRUE) my_brightness_ts_img_overlapped <- brightness_timeseries(my_img, def = \"e\",                                                           frames_per_set = 50,                                                          overlap = TRUE,                                                          thresh = \"Huang\",                                                           detrend = TRUE)"},{"path":"/articles/single-images.html","id":"saving-images","dir":"Articles","previous_headings":"Ordinary brightness","what":"Saving Images","title":"Calculating brightness with single images","text":"can save brightness images write_tif():","code":"write_tif(my_brightness_img, \"desired/path/of/my-brightness-img\") write_tif(my_brightness_ts_img, \"desired/path/of/my-brightness-ts-img\") write_tif(my_brightness_ts_img_overlapped,            \"desired/path/of/my-brightness-ts-img-overlapped\")"},{"path":"/articles/single-images.html","id":"studying-the-distribution-of-brightnesses","dir":"Articles","previous_headings":"Ordinary brightness","what":"Studying the Distribution of Brightnesses","title":"Calculating brightness with single images","text":"can take look distribution brightnesses channel 1 brightness image:  can compare distribution brightnesses immobile particles:  Note create plots like , ’ll need knowledge ggplot2 package.","code":"db <- density(my_brightness_img[, , 1, ], na.rm = TRUE)[c(\"x\", \"y\")] %>%    as_tibble() ggplot(db, aes(x, y)) + geom_line() +    labs(x = \"brightness\", y = \"frequency\") +   xlim(-2, 2) + ggtitle(\"Channel 1 brightness distribution\") immobile_brightnesses <- matrix(rpois(50 * 10^6, 50), nrow = 10^6) %>%    {matrixStats::rowVars(.) / rowMeans(.) - 1} di <- density(immobile_brightnesses) %>% {data.frame(x = .$x, y = .$y)} rbind(mutate(db, mobility = \"mobile\"), mutate(di, mobility = \"immobile\")) %>%   mutate(mobility = factor(mobility)) %>%    ggplot(aes(x, y)) + geom_line(aes(colour = mobility)) +    labs(x = \"brightness\", y = \"frequency\") +   xlim(-2, 2) +    ggtitle(\"Channel 1 brightness distribution compared to immobile entities\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rory Nolan. Author, maintainer, copyright holder. Luis Alvarez. Contributor, copyright holder. Sergi Padilla-Parra. Contributor, thesis advisor, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nolan R, Alvarez L, Elegheert J, Iliopoulou M, Jakobsdottir G, Rodriguez-Munoz M, Aricescu , Padilla-Parra S (2017). “nandb–—number brightness R novel automatic detrending algorithm.” Bioinformatics. doi:10.1093/bioinformatics/btx434.","code":"@Article{,   title = {{nandb}--—number and brightness in R with a novel automatic detrending algorithm},   author = {Rory Nolan and Luis Alvarez and Jonathan Elegheert and Maro Iliopoulou and G. Maria Jakobsdottir and Marina Rodriguez-Munoz and A. Radu Aricescu and Sergi Padilla-Parra},   journal = {Bioinformatics},   year = {2017},   doi = {10.1093/bioinformatics/btx434}, }"},{"path":"/index.html","id":"nandb-","dir":"","previous_headings":"","what":"Number and Brightness Image Analysis","title":"Number and Brightness Image Analysis","text":"Calculation molecular number brightness fluorescence microscopy image series. software published 2016 paper. seminal paper technique Digman et al. 2008. review technique published 2017. ’re familiar number brightness (N&B) technique, familiarise reading papers mentioned continuing nandb package. nandb R package intended introduce people N&B, ’s people know N&B want perform N&B calculations. ’re new R ’re want use nandb, warned need learn basic R first. recommend reading short book “Hands Programming R” Grolemund. available free https://rstudio-education.github.io/hopr/. enough want reading, check “R Data Science” available free https://r4ds..co.nz/. website gives introduction nandb R package, assuming reader basic level N&B R knowledge.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Number and Brightness Image Analysis","text":"can install release version nandb CRAN : can install (unstable) development version nandb GitHub : highly recommend using release version. dev version just ultra-curious thought unreliable.","code":"install.packages(\"nandb\") devtools::install_github(\"rorynolan/nandb\")"},{"path":"/index.html","id":"using-nandb","dir":"","previous_headings":"","what":"Using nandb","title":"Number and Brightness Image Analysis","text":"two ways use nandb. Interactively R session, playing image numeric array, dealing one image time. batch mode, software read TIFFs, perform N&B calculations write detrended TIFFs disk detrending . method permits user use R little possible better don’t intend become bon fide R users. discussed two articles. articles deal brightness; people use N&B calculate oligomeric state hence brightness interesting quantity. package also facilitates number calculations, done way, replacing “brightness” “number” function names. example, “number” equivalent brightness_timeseries() number_timeseries(). articles use “epsilon” definition brightness, ’re free use “B” definition prefer . Brightness calculations single images Brightness calculations many images batch mode articles mention brightness timeseries. explained short article Brightness timeseries. N&B timeseries nice feature nandb, automating common otherwise laborious procedure.","code":""},{"path":"/reference/brightness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate brightness from image series. — brightness","title":"Calculate brightness from image series. — brightness","text":"Given time stack images, brightness() performs calculation brightness pixel.","code":""},{"path":"/reference/brightness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate brightness from image series. — brightness","text":"","code":"brightness(   img,   def,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   s = 1,   offset = 0,   readout_noise = 0,   parallel = FALSE )"},{"path":"/reference/brightness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate brightness from image series. — brightness","text":"img 4-dimensional array style ijtiff_img (indexed img[y, x, channel, frame]) 3-dimensional array single channel ijtiff_img (indexed img[y, x, frame]). def character. definition brightness want use, \"B\" \"epsilon\"? thresh threshold thresholding method (see autothresholdr::mean_stack_thresh()) use image prior detrending brightness calculations. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. many channels, may specified vector, one element channel. quick FALSE (default), swap finding routine run several times get consensus best parameter. TRUE, swap finding routine run . filt want smooth (filt = 'mean') median (filt = 'median') filter number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 (corners included, median median 9 elements) option na_count = TRUE. want smooth/median filter number image different way, first calculate numbers without filtering (filt = NULL) using function perform desired filtering routine result. many channels, may specified vector, one element channel. s positive number. \\(S\\)-factor microscope acquisition. offset Microscope acquisition parameters. See reference Dalal et al. readout_noise Microscope acquisition parameters. See reference Dalal et al. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/brightness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate brightness from image series. — brightness","text":"matrix, brightness image.","code":""},{"path":"/reference/brightness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate brightness from image series. — brightness","text":"Digman MA, Dalal R, Horwitz AF, Gratton E. Mapping Number Molecules Brightness Laser Scanning Microscope. Biophysical Journal. 2008;94(6):2320-2332. doi:10.1529/biophysj.107.114645 . Dalal, RB, Digman, MA, Horwitz, AF, Vetri, V, Gratton, E (2008). Determination particle number brightness using laser scanning confocal microscope operating analog mode. Microsc. Res. Tech., 71, 1:69-81. doi:10.1002/jemt.20526 .","code":""},{"path":"/reference/brightness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate brightness from image series. — brightness","text":"","code":"# \\donttest{ img <- ijtiff::read_tif(system.file(\"extdata\", \"50.tif\", package = \"nandb\")) #> Reading 50.tif: an 8-bit, 50x50 pixel image of unsigned #> integer type. Reading 1 channel and 50 frames . . . #> Done. ijtiff::display(img[, , 1, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  b <- brightness(img, \"e\", thresh = \"Huang\") b <- brightness(img, \"B\", thresh = \"tri\") # }"},{"path":"/reference/brightness_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Brightness calculations for every image in a folder. — brightness_folder","title":"Brightness calculations for every image in a folder. — brightness_folder","text":"Perform brightness() calculations tif images folder save resulting brightness images disk.","code":""},{"path":"/reference/brightness_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brightness calculations for every image in a folder. — brightness_folder","text":"","code":"brightness_folder(   folder_path = \".\",   def,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   s = 1,   offset = 0,   readout_noise = 0,   parallel = FALSE )"},{"path":"/reference/brightness_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brightness calculations for every image in a folder. — brightness_folder","text":"folder_path path (relative absolute) folder wish process. def character. definition brightness want use, \"B\" \"epsilon\"? thresh threshold thresholding method (see autothresholdr::mean_stack_thresh()) use image prior detrending brightness calculations. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. many channels, may specified vector, one element channel. quick FALSE (default), swap finding routine run several times get consensus best parameter. TRUE, swap finding routine run . filt want smooth (filt = 'mean') median (filt = 'median') filter number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 (corners included, median median 9 elements) option na_count = TRUE. want smooth/median filter number image different way, first calculate numbers without filtering (filt = NULL) using function perform desired filtering routine result. many channels, may specified vector, one element channel. s positive number. \\(S\\)-factor microscope acquisition. offset Microscope acquisition parameters. See reference Dalal et al. readout_noise Microscope acquisition parameters. See reference Dalal et al. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":[]},{"path":"/reference/brightness_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brightness calculations for every image in a folder. — brightness_folder","text":"","code":"if (FALSE) { # \\dontrun{ setwd(tempdir()) img <- ijtiff::read_tif(system.file(\"extdata\", \"50.tif\", package = \"nandb\")) ijtiff::write_tif(img, \"img1.tif\") ijtiff::write_tif(img, \"img2.tif\") brightness_folder(def = \"B\", thresh = \"Huang\") } # }"},{"path":"/reference/brightness_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a brightness time-series. — brightness_timeseries","title":"Create a brightness time-series. — brightness_timeseries","text":"Given stack images img, use first frames_per_set create one brightness image, next frames_per_set create next brightness image get time-series brightness images.","code":""},{"path":"/reference/brightness_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a brightness time-series. — brightness_timeseries","text":"","code":"brightness_timeseries(   img,   def,   frames_per_set,   overlap = FALSE,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   s = 1,   offset = 0,   readout_noise = 0,   parallel = FALSE )"},{"path":"/reference/brightness_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a brightness time-series. — brightness_timeseries","text":"img 4-dimensional array style ijtiff_img (indexed img[y, x, channel, frame]) 3-dimensional array single channel ijtiff_img (indexed img[y, x, frame]). def character. definition brightness want use, \"B\" \"epsilon\"? frames_per_set number frames calculate successive brightnesses. overlap boolean. TRUE, windows used calculate number overlapped, FALSE, . example, 20-frame image series 5 frames per set, windows overlapped, frame sets used 1-5, 6-10, 11-15 16-20; whereas overlapped, frame sets 1-5, 2-6, 3-7, 4-8 16-20. thresh threshold thresholding method (see autothresholdr::mean_stack_thresh()) use image prior detrending brightness calculations. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. many channels, may specified vector, one element channel. quick FALSE (default), swap finding routine run several times get consensus best parameter. TRUE, swap finding routine run . filt want smooth (filt = 'mean') median (filt = 'median') filter number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 (corners included, median median 9 elements) option na_count = TRUE. want smooth/median filter number image different way, first calculate numbers without filtering (filt = NULL) using function perform desired filtering routine result. many channels, may specified vector, one element channel. s positive number. \\(S\\)-factor microscope acquisition. offset Microscope acquisition parameters. See reference Dalal et al. readout_noise Microscope acquisition parameters. See reference Dalal et al. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/brightness_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a brightness time-series. — brightness_timeseries","text":"object class brightness_ts_img.  img 4-dimensional (.e. 2-channel), 4-dimensional array arr returned arr[y, x, c, t] pixel \\((x, y)\\) \\(c\\)th channel \\(t\\)th brightness image brightness time series.","code":""},{"path":"/reference/brightness_timeseries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a brightness time-series. — brightness_timeseries","text":"may discard images, example 175 frames input frames_per_set = 50, last 25 discarded. detrending selected, performed whole image stack sectioning done calculation numbers.","code":""},{"path":[]},{"path":"/reference/brightness_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a brightness time-series. — brightness_timeseries","text":"","code":"# \\donttest{ img <- ijtiff::read_tif(system.file(\"extdata\", \"50.tif\", package = \"nandb\")) #> Reading 50.tif: an 8-bit, 50x50 pixel image of unsigned #> integer type. Reading 1 channel and 50 frames . . . #> Done. bts <- brightness_timeseries(img, \"e\", frames_per_set = 20, thresh = \"Huang\") # }"},{"path":"/reference/brightness_timeseries_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Brightness time-series calculations for every image in a folder. — brightness_timeseries_folder","title":"Brightness time-series calculations for every image in a folder. — brightness_timeseries_folder","text":"Perform brightness_timeseries() calculations tif images folder save resulting number images disk.","code":""},{"path":"/reference/brightness_timeseries_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brightness time-series calculations for every image in a folder. — brightness_timeseries_folder","text":"","code":"brightness_timeseries_folder(   folder_path = \".\",   def,   frames_per_set,   overlap = FALSE,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   s = 1,   offset = 0,   readout_noise = 0,   parallel = FALSE )"},{"path":"/reference/brightness_timeseries_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brightness time-series calculations for every image in a folder. — brightness_timeseries_folder","text":"folder_path path (relative absolute) folder wish process. def character. definition brightness want use, \"B\" \"epsilon\"? frames_per_set number frames calculate successive brightnesses. overlap boolean. TRUE, windows used calculate number overlapped, FALSE, . example, 20-frame image series 5 frames per set, windows overlapped, frame sets used 1-5, 6-10, 11-15 16-20; whereas overlapped, frame sets 1-5, 2-6, 3-7, 4-8 16-20. thresh threshold thresholding method (see autothresholdr::mean_stack_thresh()) use image prior detrending brightness calculations. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. many channels, may specified vector, one element channel. quick FALSE (default), swap finding routine run several times get consensus best parameter. TRUE, swap finding routine run . filt want smooth (filt = 'mean') median (filt = 'median') filter number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 (corners included, median median 9 elements) option na_count = TRUE. want smooth/median filter number image different way, first calculate numbers without filtering (filt = NULL) using function perform desired filtering routine result. many channels, may specified vector, one element channel. s positive number. \\(S\\)-factor microscope acquisition. offset Microscope acquisition parameters. See reference Dalal et al. readout_noise Microscope acquisition parameters. See reference Dalal et al. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":[]},{"path":"/reference/brightness_timeseries_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brightness time-series calculations for every image in a folder. — brightness_timeseries_folder","text":"","code":"if (FALSE) { # \\dontrun{ setwd(tempdir()) img <- ijtiff::read_tif(system.file(\"extdata\", \"50.tif\", package = \"nandb\")) ijtiff::write_tif(img, \"img1.tif\") ijtiff::write_tif(img, \"img2.tif\") brightness_timeseries_folder(def = \"e\", thresh = \"tri\", frames_per_set = 20) } # }"},{"path":"/reference/cc-nb-img-classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-correlated number and brightness image classes. — cc-nb-img-classes","title":"Cross-correlated number and brightness image classes. — cc-nb-img-classes","text":"cc_number_img cc_brightness_img classes designed hold objects images calculated cross-correlated number brightness technique.","code":""},{"path":"/reference/cc-nb-img-classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-correlated number and brightness image classes. — cc-nb-img-classes","text":"","code":"cc_number_img(img, thresh, swaps, filt)  cc_brightness_img(img, thresh, swaps, filt)"},{"path":"/reference/cc-nb-img-classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-correlated number and brightness image classes. — cc-nb-img-classes","text":"img calculated cross-correlated number brightness image. thresh positive integer, possibly object class autothresholdr::th. different channels image different thresholds, argument may specified vector list (positive integers, possibly objects class autothresholdr::th), one element channel. swaps non-negative integer attribute auto. different channels image different swaps, argument may specified list (non-negative integers attributes auto), one element channel. undetrended images, set swaps = NA. filt string, filtering method used. Must either \"mean\" \"median\", NA filtering. different channels image different filters, may specified character vector, one element channel.","code":""},{"path":"/reference/cc-nb-img-classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-correlated number and brightness image classes. — cc-nb-img-classes","text":"object class cc_number_img cc_brightness_img.","code":""},{"path":"/reference/cc-nb-img-classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-correlated number and brightness image classes. — cc-nb-img-classes","text":"object class cc_number_img cc_brightness_img 4-dimensional array real numbers mould ijtiff_img (indexed img[y, x, channel, frame]) 3 attributes: swaps non-negative integer indicating number swaps used Robin Hood detrending, attribute auto logical indicating whether parameter chosen automatically (multi-channel case, one swaps per channel given). filt mean median filtering used postprocessing?","code":""},{"path":"/reference/cc-nb-ts-img-classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-correlated number and brightness time series image classes. — cc-nb-ts-img-classes","title":"Cross-correlated number and brightness time series image classes. — cc-nb-ts-img-classes","text":"cc_number_ts_img cc_brightness_ts_img classes designed hold objects images calculated cross-correlated number brightness technique.","code":""},{"path":"/reference/cc-nb-ts-img-classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-correlated number and brightness time series image classes. — cc-nb-ts-img-classes","text":"","code":"cc_number_ts_img(img, frames_per_set, overlapped, thresh, swaps, filt)  cc_brightness_ts_img(img, frames_per_set, overlapped, thresh, swaps, filt)"},{"path":"/reference/cc-nb-ts-img-classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-correlated number and brightness time series image classes. — cc-nb-ts-img-classes","text":"img calculated cross-correlated number brightness time series image series. frames_per_set number frames used calculation point cross-correlated number brightness time series. overlapped boolean. TRUE indicates windows used calculate consecutive brightnesses time overlapped, FALSE indicates . thresh positive integer, possibly object class autothresholdr::th. different channels image different thresholds, argument may specified vector list (positive integers, possibly objects class autothresholdr::th), one element channel. swaps non-negative integer attribute auto. different channels image different swaps, argument may specified list (non-negative integers attributes auto), one element channel. undetrended images, set swaps = NA. filt string, filtering method used. Must either \"mean\" \"median\", NA filtering. different channels image different filters, may specified character vector, one element channel.","code":""},{"path":"/reference/cc-nb-ts-img-classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-correlated number and brightness time series image classes. — cc-nb-ts-img-classes","text":"object class cc_number_ts_img cc_brightness_ts_img.","code":""},{"path":"/reference/cc-nb-ts-img-classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-correlated number and brightness time series image classes. — cc-nb-ts-img-classes","text":"object class cc_number_ts_img cc_brightness_ts_img 4-dimensional array real numbers mould ijtiff_img 3 attributes: swaps non-negative integer indicating parameter used Robin Hood detrending attribute auto logical indicating whether parameter chosen automatically (multi-channel case, one swaps per channel given). frames_per_set positive integer detailing many frames used calculation point number brightness time series. overlapped boolean. TRUE indicates windows used calculate consecutive brightnesses time overlapped, FALSE indicates .","code":""},{"path":[]},{"path":"/reference/cc_brightness.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-correlated brightness. — cc_brightness","title":"Cross-correlated brightness. — cc_brightness","text":"Given time stack images  two channels, calculate cross-correlated brightness two channels pixel.","code":""},{"path":"/reference/cc_brightness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-correlated brightness. — cc_brightness","text":"","code":"cc_brightness(   img,   ch1 = 1,   ch2 = 2,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   parallel = FALSE )"},{"path":"/reference/cc_brightness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-correlated brightness. — cc_brightness","text":"img 4-dimensional array images indexed img[y, x, channel, frame] (object class ijtiff::ijtiff_img). image perform calculation . perform file yet read , set argument path file (string). ch1 natural number. index first channel use. ch2 natural number. index second channel use. thresh want apply intensity threshold prior calculating cross-correlated brightness (via autothresholdr::mean_stack_thresh())? , set thresholding method . single value, threshold applied channels. length-2 vector list, two thresholds applied channels 1 2 respectively. value NA either channel gives thresholding channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. detrend one channel , specify length 2 vector. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'smooth') median (filt = 'median') filter cross-correlated brightness image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 option na_count = TRUE. value NA either channel gives thresholding channel. want smooth/median filter cross-correlated brightness image different way, first calculate cross-correlated brightnesses without filtering (filt = NULL) using function perform desired filtering routine result. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/cc_brightness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-correlated brightness. — cc_brightness","text":"numeric matrix, cross-correlated brightness image.","code":""},{"path":"/reference/cc_brightness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-correlated brightness. — cc_brightness","text":"","code":"# \\donttest{ img <- ijtiff::read_tif(system.file(\"extdata\", \"two_ch.tif\",   package = \"nandb\" )) #> Reading two_ch.tif: an 8-bit, 30x28 pixel image of unsigned #> integer type. Reading 2 channels and 100 frames . . . #> Done. ijtiff::display(detrendr::mean_pillars(img[, , 1, ])) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  ijtiff::display(detrendr::mean_pillars(img[, , 2, ])) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  b <- brightness(img, def = \"e\", thresh = \"Huang\", filt = \"median\") ijtiff::display(b[, , 1, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  ijtiff::display(b[, , 2, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  cc_b <- cc_brightness(img, thresh = \"Huang\") ijtiff::display(cc_b[, , 1, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  # }"},{"path":"/reference/cc_brightness_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-correlated brightness calculations for every image in a folder. — cc_brightness_folder","title":"Cross-correlated brightness calculations for every image in a folder. — cc_brightness_folder","text":"Perform cc_brightness() calculations TIFF images folder save resulting images disk.","code":""},{"path":"/reference/cc_brightness_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-correlated brightness calculations for every image in a folder. — cc_brightness_folder","text":"","code":"cc_brightness_folder(   folder_path = \".\",   ch1 = 1,   ch2 = 2,   thresh = NULL,   detrend = detrend,   quick = quick,   filt = NULL,   parallel = FALSE )"},{"path":"/reference/cc_brightness_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-correlated brightness calculations for every image in a folder. — cc_brightness_folder","text":"folder_path path (relative absolute) folder wish process. ch1 natural number. index first channel use. ch2 natural number. index second channel use. thresh want apply intensity threshold prior calculating cross-correlated brightness (via autothresholdr::mean_stack_thresh())? , set thresholding method . single value, threshold applied channels. length-2 vector list, two thresholds applied channels 1 2 respectively. value NA either channel gives thresholding channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. detrend one channel , specify length 2 vector. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'smooth') median (filt = 'median') filter cross-correlated brightness image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 option na_count = TRUE. value NA either channel gives thresholding channel. want smooth/median filter cross-correlated brightness image different way, first calculate cross-correlated brightnesses without filtering (filt = NULL) using function perform desired filtering routine result. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/cc_brightness_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-correlated brightness calculations for every image in a folder. — cc_brightness_folder","text":"","code":"if (FALSE) { # \\dontrun{ setwd(tempdir()) ijtiff::write_tif(img, \"a.tif\") ijtiff::write_tif(img, \"ab.tif\") cc_brightness_folder() list.files() } # }"},{"path":"/reference/cc_brightness_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cross-correlated brightness time-series. — cc_brightness_timeseries","title":"Create a cross-correlated brightness time-series. — cc_brightness_timeseries","text":"Given stack images img, use first frames_per_set create one cross-correlated brightness image, next frames_per_set create next get time-series cross-correlated brightness images.","code":""},{"path":"/reference/cc_brightness_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cross-correlated brightness time-series. — cc_brightness_timeseries","text":"","code":"cc_brightness_timeseries(   img,   frames_per_set,   overlap = FALSE,   ch1 = 1,   ch2 = 2,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   parallel = FALSE )"},{"path":"/reference/cc_brightness_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cross-correlated brightness time-series. — cc_brightness_timeseries","text":"img 4-dimensional array images indexed img[y, x, channel, frame] (object class ijtiff::ijtiff_img). image perform calculation . perform file yet read , set argument path file (string). frames_per_set number frames calculate successive cross-correlated brightnesses. may discard images, example 175 frames input frames_per_set = 50, last 25 discarded. bleaching /thresholding selected, performed whole image stack sectioning done calculation cross-correlated brightnesses. overlap boolean. TRUE, windows used calculate brightness overlapped, FALSE, . example, 20-frame image series 5 frames per set, windows overlapped, frame sets used 1-5, 6-10, 11-15 16-20; whereas overlapped, frame sets 1-5, 2-6, 3-7, 4-8 16-20. ch1 natural number. index first channel use. ch2 natural number. index second channel use. thresh want apply intensity threshold prior calculating cross-correlated brightness (via autothresholdr::mean_stack_thresh())? , set thresholding method . single value, threshold applied channels. length-2 vector list, two thresholds applied channels 1 2 respectively. value NA either channel gives thresholding channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. detrend one channel , specify length 2 vector. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'smooth') median (filt = 'median') filter cross-correlated brightness image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 option na_count = TRUE. value NA either channel gives thresholding channel. want smooth/median filter cross-correlated brightness image different way, first calculate cross-correlated brightnesses without filtering (filt = NULL) using function perform desired filtering routine result. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/cc_brightness_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cross-correlated brightness time-series. — cc_brightness_timeseries","text":"array \\(\\)th slice \\(\\)th cross-correlated brightness image.","code":""},{"path":[]},{"path":"/reference/cc_brightness_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a cross-correlated brightness time-series. — cc_brightness_timeseries","text":"","code":"# \\donttest{ img <- ijtiff::read_tif(system.file(\"extdata\", \"two_ch.tif\",   package = \"nandb\" )) #> Reading two_ch.tif: an 8-bit, 30x28 pixel image of unsigned #> integer type. Reading 2 channels and 100 frames . . . #> Done. cc_bts <- cc_brightness_timeseries(img, 10,   thresh = \"Huang\",   filt = \"median\", parallel = 2 ) ijtiff::display(cc_bts[, , 1, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  # }"},{"path":"/reference/cc_brightness_timeseries_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-correlated brightness time-series calculations for every image in a folder. — cc_brightness_timeseries_folder","title":"Cross-correlated brightness time-series calculations for every image in a folder. — cc_brightness_timeseries_folder","text":"Perform cc_brightness_timeseries() calculations tif images folder save resulting images disk.","code":""},{"path":"/reference/cc_brightness_timeseries_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-correlated brightness time-series calculations for every image in a folder. — cc_brightness_timeseries_folder","text":"","code":"cc_brightness_timeseries_folder(   folder_path = \".\",   frames_per_set,   overlap = FALSE,   ch1 = 1,   ch2 = 2,   thresh = NULL,   detrend = detrend,   quick = quick,   filt = NULL,   parallel = FALSE )"},{"path":"/reference/cc_brightness_timeseries_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-correlated brightness time-series calculations for every image in a folder. — cc_brightness_timeseries_folder","text":"folder_path path (relative absolute) folder wish process. frames_per_set number frames calculate successive cross-correlated brightnesses. may discard images, example 175 frames input frames_per_set = 50, last 25 discarded. bleaching /thresholding selected, performed whole image stack sectioning done calculation cross-correlated brightnesses. overlap boolean. TRUE, windows used calculate brightness overlapped, FALSE, . example, 20-frame image series 5 frames per set, windows overlapped, frame sets used 1-5, 6-10, 11-15 16-20; whereas overlapped, frame sets 1-5, 2-6, 3-7, 4-8 16-20. ch1 natural number. index first channel use. ch2 natural number. index second channel use. thresh want apply intensity threshold prior calculating cross-correlated brightness (via autothresholdr::mean_stack_thresh())? , set thresholding method . single value, threshold applied channels. length-2 vector list, two thresholds applied channels 1 2 respectively. value NA either channel gives thresholding channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. detrend one channel , specify length 2 vector. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'smooth') median (filt = 'median') filter cross-correlated brightness image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 option na_count = TRUE. value NA either channel gives thresholding channel. want smooth/median filter cross-correlated brightness image different way, first calculate cross-correlated brightnesses without filtering (filt = NULL) using function perform desired filtering routine result. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":[]},{"path":"/reference/cc_brightness_timeseries_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-correlated brightness time-series calculations for every image in a folder. — cc_brightness_timeseries_folder","text":"","code":"if (FALSE) { # \\dontrun{ setwd(tempdir()) ijtiff::write_tif(img, \"a.tif\") ijtiff::write_tif(img, \"ab.tif\") cc_brightness_timeseries_folder(frames_per_set = 25) list.files() } # }"},{"path":"/reference/cc_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-correlated number. — cc_number","title":"Cross-correlated number. — cc_number","text":"Given time stack images  two channels, calculate cross-correlated number two channels pixel.","code":""},{"path":"/reference/cc_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-correlated number. — cc_number","text":"","code":"cc_number(   img,   ch1 = 1,   ch2 = 2,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   parallel = FALSE )"},{"path":"/reference/cc_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-correlated number. — cc_number","text":"img 4-dimensional array images indexed img[y, x, channel, frame] (object class ijtiff::ijtiff_img). image perform calculation . perform file yet read , set argument path file (string). ch1 natural number. index first channel use. ch2 natural number. index second channel use. thresh want apply intensity threshold prior calculating cross-correlated number (via autothresholdr::mean_stack_thresh())? , set thresholding method . single value, threshold applied channels. length-2 vector list, two thresholds applied channels 1 2 respectively. value NA either channel gives thresholding channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. detrend one channel , specify length 2 vector. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'smooth') median (filt = 'median') filter cross-correlated number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 option na_count = TRUE. value NA either channel gives thresholding channel. want smooth/median filter cross-correlated number image different way, first calculate cross-correlated numbers without filtering (filt = NULL) using function perform desired filtering routine result. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/cc_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-correlated number. — cc_number","text":"numeric matrix, cross-correlated number image.","code":""},{"path":"/reference/cc_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-correlated number. — cc_number","text":"","code":"# \\donttest{ img <- ijtiff::read_tif(system.file(\"extdata\", \"two_ch.tif\",   package = \"nandb\" )) #> Reading two_ch.tif: an 8-bit, 30x28 pixel image of unsigned #> integer type. Reading 2 channels and 100 frames . . . #> Done. ijtiff::display(detrendr::mean_pillars(img[, , 1, ])) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  ijtiff::display(detrendr::mean_pillars(img[, , 2, ])) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  n <- number(img, def = \"n\", thresh = \"Huang\", filt = \"median\") ijtiff::display(n[, , 1, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  ijtiff::display(n[, , 2, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  cc_n <- cc_number(img, thresh = \"Huang\") ijtiff::display(cc_n[, , 1, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  # }"},{"path":"/reference/cc_number_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-correlated number calculations for every image in a folder. — cc_number_folder","title":"Cross-correlated number calculations for every image in a folder. — cc_number_folder","text":"Perform cc_number() calculations TIFF images folder save resulting images disk.","code":""},{"path":"/reference/cc_number_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-correlated number calculations for every image in a folder. — cc_number_folder","text":"","code":"cc_number_folder(   folder_path = \".\",   ch1 = 1,   ch2 = 2,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   parallel = FALSE )"},{"path":"/reference/cc_number_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-correlated number calculations for every image in a folder. — cc_number_folder","text":"folder_path path (relative absolute) folder wish process. ch1 natural number. index first channel use. ch2 natural number. index second channel use. thresh want apply intensity threshold prior calculating cross-correlated number (via autothresholdr::mean_stack_thresh())? , set thresholding method . single value, threshold applied channels. length-2 vector list, two thresholds applied channels 1 2 respectively. value NA either channel gives thresholding channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. detrend one channel , specify length 2 vector. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'smooth') median (filt = 'median') filter cross-correlated number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 option na_count = TRUE. value NA either channel gives thresholding channel. want smooth/median filter cross-correlated number image different way, first calculate cross-correlated numbers without filtering (filt = NULL) using function perform desired filtering routine result. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/cc_number_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-correlated number calculations for every image in a folder. — cc_number_folder","text":"","code":"if (FALSE) { # \\dontrun{ setwd(tempdir()) ijtiff::write_tif(img, \"a.tif\") ijtiff::write_tif(img, \"ab.tif\") cc_number_folder() list.files() } # }"},{"path":"/reference/cc_number_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cross-correlated number time-series. — cc_number_timeseries","title":"Create a cross-correlated number time-series. — cc_number_timeseries","text":"Given stack images img, use first frames_per_set create one cross-correlated number image, next frames_per_set create next get time-series cross-correlated number images.","code":""},{"path":"/reference/cc_number_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cross-correlated number time-series. — cc_number_timeseries","text":"","code":"cc_number_timeseries(   img,   frames_per_set,   overlap = FALSE,   ch1 = 1,   ch2 = 2,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   parallel = FALSE )"},{"path":"/reference/cc_number_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cross-correlated number time-series. — cc_number_timeseries","text":"img 4-dimensional array images indexed img[y, x, channel, frame] (object class ijtiff::ijtiff_img). image perform calculation . perform file yet read , set argument path file (string). frames_per_set number frames calculate successive cross-correlated numbers. may discard images, example 175 frames input frames_per_set = 50, last 25 discarded. bleaching /thresholding selected, performed whole image stack sectioning done calculation cross-correlated numbers. overlap boolean. TRUE, windows used calculate brightness overlapped, FALSE, . example, 20-frame image series 5 frames per set, windows overlapped, frame sets used 1-5, 6-10, 11-15 16-20; whereas overlapped, frame sets 1-5, 2-6, 3-7, 4-8 16-20. ch1 natural number. index first channel use. ch2 natural number. index second channel use. thresh want apply intensity threshold prior calculating cross-correlated number (via autothresholdr::mean_stack_thresh())? , set thresholding method . single value, threshold applied channels. length-2 vector list, two thresholds applied channels 1 2 respectively. value NA either channel gives thresholding channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. detrend one channel , specify length 2 vector. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'smooth') median (filt = 'median') filter cross-correlated number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 option na_count = TRUE. value NA either channel gives thresholding channel. want smooth/median filter cross-correlated number image different way, first calculate cross-correlated numbers without filtering (filt = NULL) using function perform desired filtering routine result. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/cc_number_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cross-correlated number time-series. — cc_number_timeseries","text":"array \\(\\)th slice \\(\\)th cross-correlated number image.","code":""},{"path":[]},{"path":"/reference/cc_number_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a cross-correlated number time-series. — cc_number_timeseries","text":"","code":"# \\donttest{ img <- ijtiff::read_tif(system.file(\"extdata\", \"two_ch.tif\",   package = \"nandb\" )) #> Reading two_ch.tif: an 8-bit, 30x28 pixel image of unsigned #> integer type. Reading 2 channels and 100 frames . . . #> Done. cc_nts <- cc_number_timeseries(img, 10,   thresh = \"Huang\",   filt = \"median\", parallel = 2 ) ijtiff::display(cc_nts[, , 1, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  # }"},{"path":"/reference/cc_number_timeseries_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-correlated number time-series calculations for every image in a folder. — cc_number_timeseries_folder","title":"Cross-correlated number time-series calculations for every image in a folder. — cc_number_timeseries_folder","text":"Perform cc_number_timeseries() calculations tif images folder save resulting images disk.","code":""},{"path":"/reference/cc_number_timeseries_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-correlated number time-series calculations for every image in a folder. — cc_number_timeseries_folder","text":"","code":"cc_number_timeseries_folder(   folder_path = \".\",   frames_per_set,   overlap = FALSE,   ch1 = 1,   ch2 = 2,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   parallel = FALSE )"},{"path":"/reference/cc_number_timeseries_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-correlated number time-series calculations for every image in a folder. — cc_number_timeseries_folder","text":"folder_path path (relative absolute) folder wish process. frames_per_set number frames calculate successive cross-correlated numbers. may discard images, example 175 frames input frames_per_set = 50, last 25 discarded. bleaching /thresholding selected, performed whole image stack sectioning done calculation cross-correlated numbers. overlap boolean. TRUE, windows used calculate brightness overlapped, FALSE, . example, 20-frame image series 5 frames per set, windows overlapped, frame sets used 1-5, 6-10, 11-15 16-20; whereas overlapped, frame sets 1-5, 2-6, 3-7, 4-8 16-20. ch1 natural number. index first channel use. ch2 natural number. index second channel use. thresh want apply intensity threshold prior calculating cross-correlated number (via autothresholdr::mean_stack_thresh())? , set thresholding method . single value, threshold applied channels. length-2 vector list, two thresholds applied channels 1 2 respectively. value NA either channel gives thresholding channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. detrend one channel , specify length 2 vector. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'smooth') median (filt = 'median') filter cross-correlated number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 option na_count = TRUE. value NA either channel gives thresholding channel. want smooth/median filter cross-correlated number image different way, first calculate cross-correlated numbers without filtering (filt = NULL) using function perform desired filtering routine result. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":[]},{"path":"/reference/cc_number_timeseries_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-correlated number time-series calculations for every image in a folder. — cc_number_timeseries_folder","text":"","code":"if (FALSE) { # \\dontrun{ setwd(tempdir()) ijtiff::write_tif(img, \"a.tif\") ijtiff::write_tif(img, \"ab.tif\") cc_number_timeseries_folder(frames_per_set = 25) list.files() } # }"},{"path":"/reference/cross_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the cross-variance of two vectors. — cross_var","title":"Calculate the cross-variance of two vectors. — cross_var","text":"cross-variance function defined reference.","code":""},{"path":"/reference/cross_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the cross-variance of two vectors. — cross_var","text":"","code":"cross_var(x, y)"},{"path":"/reference/cross_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the cross-variance of two vectors. — cross_var","text":"x numeric vector. y numeric vector length x.","code":""},{"path":"/reference/cross_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the cross-variance of two vectors. — cross_var","text":"number","code":""},{"path":"/reference/cross_var.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the cross-variance of two vectors. — cross_var","text":"Digman, MA, Wiseman, PW, Choi, C, Horwitz, AR, Gratton, E (2009). Stoichiometry molecular complexes adhesions living cells. Proc. Natl. Acad. Sci. U.S.., 106, 7:2170-5.","code":""},{"path":"/reference/cross_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the cross-variance of two vectors. — cross_var","text":"","code":"cross_var(0:3, 2:5) #> [1] 1.25"},{"path":"/reference/cross_var_pillars.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the cross-variance of corresponding pillars of 3d arrays. — cross_var_pillars","title":"Calculate the cross-variance of corresponding pillars of 3d arrays. — cross_var_pillars","text":"cross-variance function defined reference.","code":""},{"path":"/reference/cross_var_pillars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the cross-variance of corresponding pillars of 3d arrays. — cross_var_pillars","text":"","code":"cross_var_pillars(x, y)"},{"path":"/reference/cross_var_pillars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the cross-variance of corresponding pillars of 3d arrays. — cross_var_pillars","text":"x 3-dimensional array. y 3-dimensional array dimensions x.","code":""},{"path":"/reference/cross_var_pillars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the cross-variance of corresponding pillars of 3d arrays. — cross_var_pillars","text":"matrix.","code":""},{"path":"/reference/cross_var_pillars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the cross-variance of corresponding pillars of 3d arrays. — cross_var_pillars","text":"Pillar , j 3-dimensional array arr arr[, j, ].","code":""},{"path":"/reference/cross_var_pillars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the cross-variance of corresponding pillars of 3d arrays. — cross_var_pillars","text":"","code":"x <- array(1:27, dim = rep(3, 3)) y <- array(0:26, dim = rep(3, 3)) cross_var_pillars(x, y) #>      [,1] [,2] [,3] #> [1,]   54   54   54 #> [2,]   54   54   54 #> [3,]   54   54   54"},{"path":"/reference/matrix_raster_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a raster plot of a matrix. — matrix_raster_plot","title":"Make a raster plot of a matrix. — matrix_raster_plot","text":"Given matrix mat, make raster plot matrix whereby plot, pixel \\(x = \\), \\(y = \\)j colour based value mat[, j] \\(x\\) axis points right \\(y\\) axis points (see 'Details').","code":""},{"path":"/reference/matrix_raster_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a raster plot of a matrix. — matrix_raster_plot","text":"","code":"matrix_raster_plot(   mat,   scale_name = \"scale\",   limits = NULL,   ranges = NULL,   range_names = NULL,   colours = NULL,   na_colour = \"black\",   clip = FALSE,   clip_low = FALSE,   clip_high = FALSE,   log_trans = FALSE,   breaks = NULL,   include_breaks = NULL )"},{"path":"/reference/matrix_raster_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a raster plot of a matrix. — matrix_raster_plot","text":"mat matrix wish plot. scale_name string. title color scale right plot. limits gives user option set values outside certain range nearest value within range (clip = TRUE) NA (clip = FALSE. example, set values outside range [1.5, 2.6) NA, use limits = c(1.5, 2.6), clip = FALSE. colour range cover values within specified limits. ranges numeric vector. want specific ranges values color, specify ranges via increasing numeric vector. example, want ranges 0.5-1.2 1.2-3, use ranges = c(0.5, 1.2, 3). ranges specified number (numeric vector length 1) n, equivalent setting ranges n equal-length intervals within range matrix, .e. equivalent setting `ranges = seq(min(mat), max(mat), length.= n 1). one rangesandlimitsshould set.   ranges set, behaviour values ranges   set thecliparguments thelimits` argument. range_names character vector. colour scale discrete, can set names label range legend. colours set ranges, may specify colors wish colour range. must length number intervals specified ranges.  specified ranges, may specify colours (passed ggplot2::scale_fill_gradientn()) create continuous colour band. specified character vector, colors specified either values colors() value rgb() function. Note allows use grDevices::rainbow() friends. default uses viridis::viridis(). na_colour colour NA pixels ? Default black. clip either limits ranges set (one never set ), may values fall outside specified limits/ranges. clip = TRUE, values outside limits/ranges set nearest values within , clip = FALSE, values set NA. Note setting clip = TRUE equivalent setting clip_low clip_high TRUE. clip_low Setting TRUE (leaving clip = FALSE, clip_high = FALSE) set values falling specified limits/ranges nearest value within , values falling limits/ranges set NA. clip_high Setting TRUE (leaving clip = FALSE, clip_low = FALSE) set values falling specified limits/ranges nearest value within , values falling limits/ranges set NA. log_trans want log-transform colour scaling? breaks want tick marks appear legend colour scale? include_breaks want specify breaks, want specific ones included legend colour scale, specify specific ones .","code":""},{"path":"/reference/matrix_raster_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a raster plot of a matrix. — matrix_raster_plot","text":"graphics console, raster plot (via ggplot2::geom_raster()) appear matrix values represented pixel colours, named scale bar.","code":""},{"path":"/reference/matrix_raster_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a raster plot of a matrix. — matrix_raster_plot","text":"","code":"# \\donttest{ img <- ijtiff::read_tif(system.file(\"extdata\", \"50.tif\", package = \"nandb\")) #> Reading 50.tif: an 8-bit, 50x50 pixel image of unsigned #> integer type. Reading 1 channel and 50 frames . . . #> Done. ijtiff::display(img[, , 1, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  matrix_raster_plot(img[, , 1, 1])  b <- brightness(img, def = \"B\", detrend = FALSE, thresh = \"Huang\") matrix_raster_plot(b, scale_name = \"brightness\")  matrix_raster_plot(b, scale_name = \"brightness\", log_trans = TRUE)  matrix_raster_plot(b,   scale_name = \"brightness\", log_trans = TRUE,   include_breaks = 1.35 )  matrix_raster_plot(b,   scale_name = \"brightness\", log_trans = TRUE,   breaks = 1:3 )  matrix_raster_plot(b,   scale_name = \"brightness\",   ranges = seq(0.5, 3, length.out = 6),   range_names = paste0(1:5, \"mer\") )  matrix_raster_plot(b,   scale_name = \"brightness\",   ranges = seq(0.5, 3, length.out = 6),   range_names = paste0(1:5, \"mer\"), log_trans = TRUE )  matrix_raster_plot(b,   scale_name = \"brightness\",   include_breaks = 1.25, range_names = NULL,   log_trans = FALSE )  matrix_raster_plot(b,   scale_name = \"brightness\",   include_breaks = 1.25, log_trans = TRUE )  matrix_raster_plot(b,   scale_name = \"brightness\",   limits = c(1, 1.25), clip = TRUE )  matrix_raster_plot(b,   scale_name = \"brightness\",   include_breaks = 1.25 )  # }"},{"path":"/reference/median_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth and median filters with options for handling NAs. — median_filter","title":"Smooth and median filters with options for handling NAs. — median_filter","text":"alternatives EBImage::filter2() EBImage::medianFilter() smooth median filtering respectively. functions many options dealing NA values EBImage's functions lack.","code":""},{"path":"/reference/median_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth and median filters with options for handling NAs. — median_filter","text":"","code":"median_filter(mat, size = 1L, na_rm = FALSE, na_count = FALSE)  smooth_filter(mat, size = 1L, na_rm = FALSE, na_count = FALSE)"},{"path":"/reference/median_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth and median filters with options for handling NAs. — median_filter","text":"mat matrix (representing image). size integer; median filter radius. na_rm NAs ignored? na_count TRUE, median calculation, majority arguments NAs, NA returned NAs minority, ignored median(x, na.rm = TRUE).","code":""},{"path":"/reference/median_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth and median filters with options for handling NAs. — median_filter","text":"matrix (median filtered image).","code":""},{"path":"/reference/median_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smooth and median filters with options for handling NAs. — median_filter","text":"behavior image boundaries source image padded pixels whose values equal nearest border pixel value.","code":""},{"path":"/reference/median_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth and median filters with options for handling NAs. — median_filter","text":"","code":"m <- matrix(1:9, nrow = 3) m[2:3, 2:3] <- NA print(m) #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2   NA   NA #> [3,]    3   NA   NA median_filter(m) #>      [,1] [,2] [,3] #> [1,]   NA   NA   NA #> [2,]   NA   NA   NA #> [3,]   NA   NA   NA median_filter(m, na_rm = TRUE) #>      [,1] [,2] [,3] #> [1,]  1.5    4    7 #> [2,]  2.0    3    7 #> [3,]  3.0    3   NA median_filter(m, na_count = TRUE) #>      [,1] [,2] [,3] #> [1,]  1.5    4    7 #> [2,]  2.0    3   NA #> [3,]  3.0   NA   NA  smooth_filter(m) #>      [,1] [,2] [,3] #> [1,]   NA   NA   NA #> [2,]   NA   NA   NA #> [3,]   NA   NA   NA smooth_filter(m, na_rm = TRUE) #>          [,1]     [,2] [,3] #> [1,] 2.000000 3.714286    6 #> [2,] 2.285714 3.400000    6 #> [3,] 2.666667 2.666667  NaN smooth_filter(m, na_count = TRUE) #>          [,1]     [,2] [,3] #> [1,] 2.000000 3.714286    6 #> [2,] 2.285714 3.400000   NA #> [3,] 2.666667       NA   NA"},{"path":"/reference/nandb.html","id":null,"dir":"Reference","previous_headings":"","what":"nandb: Number and brightness in R. — nandb","title":"nandb: Number and brightness in R. — nandb","text":"nandb package gives functions calculation molecular number brightness images, detailed Digman et al. 2008. comes implementation novel 'automatic detrending' technique.","code":""},{"path":"/reference/nandb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"nandb: Number and brightness in R. — nandb","text":"Digman MA, Dalal R, Horwitz AF, Gratton E. Mapping Number Molecules Brightness Laser Scanning Microscope. Biophysical Journal. 2008;94(6):2320-2332. doi:10.1529/biophysj.107.114645 .","code":""},{"path":"/reference/nb-img-classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Number and brightness image classes. — nb-img-classes","title":"Number and brightness image classes. — nb-img-classes","text":"number_img brightness_img classes designed hold objects images calculated number brightness technique.","code":""},{"path":"/reference/nb-img-classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number and brightness image classes. — nb-img-classes","text":"","code":"number_img(img, def, thresh, swaps, filt)  brightness_img(img, def, thresh, swaps, filt)"},{"path":"/reference/nb-img-classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number and brightness image classes. — nb-img-classes","text":"img calculated number brightness image. def number brightness definition used. thresh positive integer, possibly object class autothresholdr::th. different channels image different thresholds, argument may specified vector list (positive integers, possibly objects class autothresholdr::th), one element channel. swaps non-negative integer attribute auto. different channels image different swaps, argument may specified list (non-negative integers attributes auto), one element channel. undetrended images, set swaps = NA. filt string, filtering method used. Must either \"mean\" \"median\", NA filtering. different channels image different filters, may specified character vector, one element channel.","code":""},{"path":"/reference/nb-img-classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number and brightness image classes. — nb-img-classes","text":"object class number_img brightness_img.","code":""},{"path":"/reference/nb-img-classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number and brightness image classes. — nb-img-classes","text":"object class number_img brightness_img 4-dimensional array real numbers mould ijtiff_img (indexed img[y, x, channel, frame]) 4 attributes: thresh positive integer, possibly object class autothresholdr::th detailing threshold thresholding method used preprocessing (multi-channel case, one threshold per channel given). swaps non-negative integer indicating number swaps Robin Hood detrending, attribute auto logical indicating whether parameter chosen automatically (multi-channel case, one threshold per channel given). filt mean median filtering used postprocessing?","code":""},{"path":"/reference/nb-ts-img-classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Number and brightness time series image classes. — nb-ts-img-classes","title":"Number and brightness time series image classes. — nb-ts-img-classes","text":"number_ts_img brightness_ts_img classes designed hold objects images calculated number brightness technique.","code":""},{"path":"/reference/nb-ts-img-classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number and brightness time series image classes. — nb-ts-img-classes","text":"","code":"number_ts_img(img, def, frames_per_set, overlapped, thresh, swaps, filt)  brightness_ts_img(img, def, frames_per_set, overlapped, thresh, swaps, filt)"},{"path":"/reference/nb-ts-img-classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number and brightness time series image classes. — nb-ts-img-classes","text":"img calculated number brightness time series image series. def number brightness definition used. frames_per_set number frames used calculation point number brightness time series. overlapped boolean. TRUE indicates windows used calculate consecutive brightnesses time overlapped, FALSE indicates . thresh positive integer, possibly object class autothresholdr::th. different channels image different thresholds, argument may specified vector list (positive integers, possibly objects class autothresholdr::th), one element channel. swaps non-negative integer attribute auto. different channels image different swaps, argument may specified list (non-negative integers attributes auto), one element channel. undetrended images, set swaps = NA. filt string, filtering method used. Must either \"mean\" \"median\", NA filtering. different channels image different filters, may specified character vector, one element channel.","code":""},{"path":"/reference/nb-ts-img-classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number and brightness time series image classes. — nb-ts-img-classes","text":"object class number_ts_img brightness_ts_img.","code":""},{"path":"/reference/nb-ts-img-classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number and brightness time series image classes. — nb-ts-img-classes","text":"object class number_ts_img brightness_ts_img 3- 4-dimensional array real numbers 4 attributes: thresh positive integer, possibly object class autothresholdr::th detailing threshold thresholding method used preprocessing (multi-channel case, one threshold per channel given). swaps non-negative integer indicating number swaps used Robin Hood detrending, attribute auto logical indicating whether parameter chosen automatically (multi-channel case, one swaps per channel given). frames_per_set positive integer detailing many frames used calculation point number brightness time series. overlapped boolean. TRUE indicates windows used calculate consecutive brightnesses time overlapped, FALSE indicates .","code":""},{"path":[]},{"path":"/reference/number.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate number from image series. — number","title":"Calculate number from image series. — number","text":"Given time stack images, number() performs calculation number pixel.","code":""},{"path":"/reference/number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate number from image series. — number","text":"","code":"number(   img,   def,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   s = 1,   offset = 0,   readout_noise = 0,   gamma = 1,   parallel = FALSE )"},{"path":"/reference/number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate number from image series. — number","text":"img 4-dimensional array images indexed img[y, x, channel, frame] (object class ijtiff::ijtiff_img). image perform calculation . perform file yet read , set argument path file (string). def character. definition number want use, \"n\" \"N\"? thresh threshold thresholding method (see autothresholdr::mean_stack_thresh()) use image prior detrending number calculations. many channels, may specified vector list, one element channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. many channels, may specified vector, one element channel. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'mean') median (filt = 'median') filter number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 (corners included, median median 9 elements) option na_count = TRUE. want smooth/median filter number image different way, first calculate numbers without filtering (filt = NULL) using function perform desired filtering routine result. many channels, may specified vector, one element channel. s positive number. \\(S\\)-factor microscope acquisition. offset, readout_noise Microscope acquisition parameters. See reference Dalal et al. gamma Factor correction number \\(n\\) due illumination profile. default (gamma = 1) effect. Changing gamma effect dividing result gamma, result gamma = 0.5 two times result gamma = 1. Gaussian illumination profile, use gamma = 0.3536; Gaussian-Lorentzian illumination profile, use gamma = 0.0760. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate number from image series. — number","text":"matrix, number image.","code":""},{"path":"/reference/number.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate number from image series. — number","text":"Digman MA, Dalal R, Horwitz AF, Gratton E. Mapping Number Molecules Brightness Laser Scanning Microscope. Biophysical Journal. 2008;94(6):2320-2332. doi:10.1529/biophysj.107.114645 . Dalal, RB, Digman, MA, Horwitz, AF, Vetri, V, Gratton, E (2008). Determination particle number brightness using laser scanning confocal microscope operating analog mode. Microsc. Res. Tech., 71, 1:69-81. doi:10.1002/jemt.20526 . Hur K-H, Macdonald PJ, Berk S, Angert CI, Chen Y, Mueller JD (2014) Quantitative Measurement Brightness Living Cells Presence Photodepletion. PLoS ONE 9(5): e97440. doi:10.1371/journal.pone.0097440 .","code":""},{"path":"/reference/number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate number from image series. — number","text":"","code":"# \\donttest{ img <- ijtiff::read_tif(system.file(\"extdata\", \"50.tif\", package = \"nandb\")) #> Reading 50.tif: an 8-bit, 50x50 pixel image of unsigned #> integer type. Reading 1 channel and 50 frames . . . #> Done. ijtiff::display(img[, , 1, 1]) #> Using basic display functionality. #>   * For better display functionality, install the EBImage package. #>   * To install `EBImage`: #>     - Install `BiocManager` with `install.packages(\"BiocManager\")`. #>     - Then run `BiocManager::install(\"EBImage\")`.  num <- number(img, \"N\", thresh = \"Huang\") num <- number(img, \"n\", thresh = \"tri\") # }"},{"path":"/reference/number_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Number calculations for every image in a folder. — number_folder","title":"Number calculations for every image in a folder. — number_folder","text":"Perform number() calculations tif images folder save resulting number images disk.","code":""},{"path":"/reference/number_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number calculations for every image in a folder. — number_folder","text":"","code":"number_folder(   folder_path = \".\",   def,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   s = 1,   offset = 0,   readout_noise = 0,   gamma = 1,   parallel = FALSE )"},{"path":"/reference/number_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number calculations for every image in a folder. — number_folder","text":"folder_path path (relative absolute) folder wish process. def character. definition number want use, \"n\" \"N\"? thresh threshold thresholding method (see autothresholdr::mean_stack_thresh()) use image prior detrending number calculations. many channels, may specified vector list, one element channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. many channels, may specified vector, one element channel. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'mean') median (filt = 'median') filter number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 (corners included, median median 9 elements) option na_count = TRUE. want smooth/median filter number image different way, first calculate numbers without filtering (filt = NULL) using function perform desired filtering routine result. many channels, may specified vector, one element channel. s positive number. \\(S\\)-factor microscope acquisition. offset Microscope acquisition parameters. See reference Dalal et al. readout_noise Microscope acquisition parameters. See reference Dalal et al. gamma Factor correction number \\(n\\) due illumination profile. default (gamma = 1) effect. Changing gamma effect dividing result gamma, result gamma = 0.5 two times result gamma = 1. Gaussian illumination profile, use gamma = 0.3536; Gaussian-Lorentzian illumination profile, use gamma = 0.0760. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/number_folder.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Number calculations for every image in a folder. — number_folder","text":"Extreme number values (magnitude greater 3.40282e+38) written TIFF file NA, since TIFF files handle huge numbers.","code":""},{"path":[]},{"path":"/reference/number_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number calculations for every image in a folder. — number_folder","text":"","code":"if (FALSE) { # \\dontrun{ setwd(tempdir()) img <- ijtiff::read_tif(system.file(\"extdata\", \"50.tif\", package = \"nandb\")) ijtiff::write_tif(img, \"img2.tif\") number_folder(def = \"n\", thresh = \"Huang\", parallel = 2) } # }"},{"path":"/reference/number_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a number time-series. — number_timeseries","title":"Create a number time-series. — number_timeseries","text":"Given stack images img, use first frames_per_set create one number image, next frames_per_set create next number image get time-series number images.","code":""},{"path":"/reference/number_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a number time-series. — number_timeseries","text":"","code":"number_timeseries(   img,   def,   frames_per_set,   overlap = FALSE,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   s = 1,   offset = 0,   readout_noise = 0,   gamma = 1,   parallel = FALSE )"},{"path":"/reference/number_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a number time-series. — number_timeseries","text":"img 4-dimensional array images indexed img[y, x, channel, frame] (object class ijtiff::ijtiff_img). image perform calculation . perform file yet read , set argument path file (string). def character. definition number want use, \"n\" \"N\"? frames_per_set number frames calculate successive numbers. overlap boolean. TRUE, windows used calculate brightness overlapped, FALSE, . example, 20-frame image series 5 frames per set, windows overlapped, frame sets used 1-5, 6-10, 11-15 16-20; whereas overlapped, frame sets 1-5, 2-6, 3-7, 4-8 16-20. thresh threshold thresholding method (see autothresholdr::mean_stack_thresh()) use image prior detrending number calculations. many channels, may specified vector list, one element channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. many channels, may specified vector, one element channel. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'mean') median (filt = 'median') filter number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 (corners included, median median 9 elements) option na_count = TRUE. want smooth/median filter number image different way, first calculate numbers without filtering (filt = NULL) using function perform desired filtering routine result. many channels, may specified vector, one element channel. s positive number. \\(S\\)-factor microscope acquisition. offset Microscope acquisition parameters. See reference Dalal et al. readout_noise Microscope acquisition parameters. See reference Dalal et al. gamma Factor correction number \\(n\\) due illumination profile. default (gamma = 1) effect. Changing gamma effect dividing result gamma, result gamma = 0.5 two times result gamma = 1. Gaussian illumination profile, use gamma = 0.3536; Gaussian-Lorentzian illumination profile, use gamma = 0.0760. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/number_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a number time-series. — number_timeseries","text":"object class number_ts_img.","code":""},{"path":"/reference/number_timeseries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a number time-series. — number_timeseries","text":"may discard images, example 175 frames input frames_per_set = 50, last 25 discarded. detrending selected, performed whole image stack sectioning done calculation numbers.","code":""},{"path":[]},{"path":"/reference/number_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a number time-series. — number_timeseries","text":"","code":"# \\donttest{ img <- ijtiff::read_tif(system.file(\"extdata\", \"50.tif\", package = \"nandb\")) #> Reading 50.tif: an 8-bit, 50x50 pixel image of unsigned #> integer type. Reading 1 channel and 50 frames . . . #> Done. nts <- number_timeseries(img, \"n\", frames_per_set = 20, thresh = \"Huang\") # }"},{"path":"/reference/number_timeseries_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Number time-series calculations for every image in a folder. — number_timeseries_folder","title":"Number time-series calculations for every image in a folder. — number_timeseries_folder","text":"Perform number_timeseries() calculations tif images folder save resulting number images disk.","code":""},{"path":"/reference/number_timeseries_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number time-series calculations for every image in a folder. — number_timeseries_folder","text":"","code":"number_timeseries_folder(   folder_path = \".\",   def,   frames_per_set,   overlap = FALSE,   thresh = NULL,   detrend = FALSE,   quick = FALSE,   filt = NULL,   s = 1,   offset = 0,   readout_noise = 0,   gamma = 1,   parallel = FALSE )"},{"path":"/reference/number_timeseries_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number time-series calculations for every image in a folder. — number_timeseries_folder","text":"folder_path path (relative absolute) folder wish process. def character. definition number want use, \"n\" \"N\"? frames_per_set number frames calculate successive numbers. overlap boolean. TRUE, windows used calculate brightness overlapped, FALSE, . example, 20-frame image series 5 frames per set, windows overlapped, frame sets used 1-5, 6-10, 11-15 16-20; whereas overlapped, frame sets 1-5, 2-6, 3-7, 4-8 16-20. thresh threshold thresholding method (see autothresholdr::mean_stack_thresh()) use image prior detrending number calculations. many channels, may specified vector list, one element channel. detrend Detrend data detrendr::img_detrend_rh(). best known detrending method brightness analysis. fine-grained control detrending, use detrendr package. many channels, may specified vector, one element channel. quick FALSE repeats detrending procedure (inherent randomness) times hone best detrend. TRUE quicker, performing routine . FALSE better. filt want smooth (filt = 'mean') median (filt = 'median') filter number image using smooth_filter() median_filter() respectively? selected, invoked filter radius 1 (corners included, median median 9 elements) option na_count = TRUE. want smooth/median filter number image different way, first calculate numbers without filtering (filt = NULL) using function perform desired filtering routine result. many channels, may specified vector, one element channel. s positive number. \\(S\\)-factor microscope acquisition. offset Microscope acquisition parameters. See reference Dalal et al. readout_noise Microscope acquisition parameters. See reference Dalal et al. gamma Factor correction number \\(n\\) due illumination profile. default (gamma = 1) effect. Changing gamma effect dividing result gamma, result gamma = 0.5 two times result gamma = 1. Gaussian illumination profile, use gamma = 0.3536; Gaussian-Lorentzian illumination profile, use gamma = 0.0760. parallel like use multiple cores speed function? , set number cores , use available cores, use parallel = TRUE.","code":""},{"path":"/reference/number_timeseries_folder.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Number time-series calculations for every image in a folder. — number_timeseries_folder","text":"Extreme number values (magnitude greater 3.40282e+38) written TIFF file NA, since TIFF files handle huge numbers.","code":""},{"path":[]},{"path":"/reference/number_timeseries_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number time-series calculations for every image in a folder. — number_timeseries_folder","text":"","code":"if (FALSE) { # \\dontrun{ setwd(tempdir()) img <- ijtiff::read_tif(system.file(\"extdata\", \"50.tif\", package = \"nandb\")) ijtiff::write_tif(img, \"img1.tif\") ijtiff::write_tif(img, \"img2.tif\") number_timeseries_folder(def = \"n\", thresh = \"Huang\", frames_per_set = 20) } # }"},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-2-1-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.1.1","text":"Prep new ijtiff::display().","code":""},{"path":"/news/index.html","id":"nandb-210","dir":"Changelog","previous_headings":"","what":"nandb 2.1.0","title":"nandb 2.1.0","text":"CRAN release: 2021-05-16","code":""},{"path":"/news/index.html","id":"minor-improvements-2-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"nandb 2.1.0","text":"messages ijtiff /O.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.1.0","text":"Insist bug-fixed autothresholdr.","code":""},{"path":"/news/index.html","id":"nandb-208","dir":"Changelog","previous_headings":"","what":"nandb 2.0.8","title":"nandb 2.0.8","text":"CRAN release: 2021-04-21","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.0.8","text":"Insist bug-fixed filesstrings >= 3.2. Remove LazyData DESCRIPTION (causing CRAN note).","code":""},{"path":"/news/index.html","id":"nandb-207","dir":"Changelog","previous_headings":"","what":"nandb 2.0.7","title":"nandb 2.0.7","text":"CRAN release: 2020-05-08","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-7","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.0.7","text":"Cope ijtiff working 32-bit Windows.","code":""},{"path":"/news/index.html","id":"nandb-206","dir":"Changelog","previous_headings":"","what":"nandb 2.0.6","title":"nandb 2.0.6","text":"CRAN release: 2020-03-16","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.0.6","text":"Fix failing unit test.","code":""},{"path":"/news/index.html","id":"nandb-205","dir":"Changelog","previous_headings":"","what":"nandb 2.0.5","title":"nandb 2.0.5","text":"CRAN release: 2019-08-22","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.0.5","text":"skip_on_cran() tests allow different C++ <random> implementations (Travis, AppVeyor R-hub enough).","code":""},{"path":"/news/index.html","id":"nandb-204","dir":"Changelog","previous_headings":"","what":"nandb 2.0.4","title":"nandb 2.0.4","text":"CRAN release: 2019-07-08","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.0.4","text":"Exclude test CRAN oldrel. Insist latest, bug-fixed ijtiff v2.0.2.","code":""},{"path":"/news/index.html","id":"nandb-203","dir":"Changelog","previous_headings":"","what":"nandb 2.0.3","title":"nandb 2.0.3","text":"CRAN release: 2019-06-28","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.0.3","text":"Fix tests CRAN Solaris Windows oldrel. Insist latest, bug-fixed filesstrings v3.1.5.","code":""},{"path":"/news/index.html","id":"nandb-202","dir":"Changelog","previous_headings":"","what":"nandb 2.0.2","title":"nandb 2.0.2","text":"CRAN release: 2019-06-17","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.0.2","text":"Insist new filesstrings. Old filesstrings wreaking havoc nandb due incompatibility older versions strex. See https://github.com/rorynolan/strex/issues/2.","code":""},{"path":"/news/index.html","id":"nandb-201","dir":"Changelog","previous_headings":"","what":"nandb 2.0.1","title":"nandb 2.0.1","text":"CRAN release: 2019-05-31","code":""},{"path":"/news/index.html","id":"bug-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 2.0.1","text":"Require necessary versions glue filesstrings newest, least buggy ijtiff, autothresholdr detrendr.","code":""},{"path":"/news/index.html","id":"nandb-200","dir":"Changelog","previous_headings":"","what":"nandb 2.0.0","title":"nandb 2.0.0","text":"CRAN release: 2018-11-11","code":""},{"path":"/news/index.html","id":"major-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"MAJOR CHANGES","title":"nandb 2.0.0","text":"Robin Hood detrending now used instead exponential smoothing detrending. breaking change.","code":""},{"path":"/news/index.html","id":"new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"nandb 2.0.0","text":"timeseries functions now option overlap better time resolution. pkgdown website!","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"nandb 1.1.0","text":"matrix_raster_plot() back. thought didn’t really fit user said missed gone ’s back now.","code":""},{"path":"/news/index.html","id":"nandb-101","dir":"Changelog","previous_headings":"","what":"nandb 1.0.1","title":"nandb 1.0.1","text":"CRAN release: 2018-05-08","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 1.0.1","text":"Fix issues CRAN linux devel clang.","code":""},{"path":"/news/index.html","id":"nandb-100","dir":"Changelog","previous_headings":"","what":"nandb 1.0.0","title":"nandb 1.0.0","text":"CRAN release: 2018-04-27","code":""},{"path":"/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"nandb 1.0.0","text":"package now peer-reviewed published journal Bioinformatics. See citation(\"nandb\"). package style now accordance tidyverse style guide. brightness() number() now include options set offset, S-factor, readout_noise gamma correction terms. brightness() number() now enable calculation definitions (“B” “epsilon”; “N” “n”) brightness number. Detrending outsourced detrendr package. new package makes detrending accurate much faster. TIFF /O graphics display() now outsourced ijtiff package. means R users longer tell nandb many channels images. package now S3 class system.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 1.0.0","text":"Kmer calculations longer possible. way done -simple.","code":""},{"path":"/news/index.html","id":"nandb-021","dir":"Changelog","previous_headings":"","what":"nandb 0.2.1","title":"nandb 0.2.1","text":"CRAN release: 2017-07-11","code":""},{"path":"/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"nandb 0.2.1","text":"Compatible filesstrings 1.1.0.","code":""},{"path":"/news/index.html","id":"nandb-020","dir":"Changelog","previous_headings":"","what":"nandb 0.2.0","title":"nandb 0.2.0","text":"CRAN release: 2017-05-29 first version consider CRAN-worthy.","code":""}]
